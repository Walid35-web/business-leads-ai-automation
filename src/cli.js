const BusinessScraper = require('./scraper');
const FileUtils = require('./fileUtils');

// Parse command line arguments
function parseArguments() {
  const args = process.argv.slice(2);
  const options = {
    query: "rental mobil",
    maxResults: 20,
    generateMarketing: false,
    marketingContent: "",
    callToAction: ""
  };

  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '-q':
      case '--query':
        options.query = args[i + 1];
        i++;
        break;
      case '-l':
      case '--length':
        const length = parseInt(args[i + 1]) || 20;
        options.maxResults = Math.min(length, 100); // Max 100 results
        i++;
        break;
      case '-m':
      case '--marketing':
        options.generateMarketing = true;
        options.marketingContent = args[i + 1] || "";
        i++;
        break;
      case '-c':
      case '--cta':
        options.callToAction = args[i + 1] || "";
        break;
      case '-h':
      case '--help':
        console.log(`
Usage: node src/cli.js [options]

Options:
  -q, --query <string>     Search query (default: "rental mobil")
  -l, --length <number>    Number of results to scrape (default: 20, max: 100)
  -m, --marketing <text>   Marketing content + Generate AI marketing templates
  -c, --cta <text>        Call to action (required if -m is used)
  -h, --help              Show this help message

Examples:
  node index.js -q "Rental Mobil Jakarta" -l 50
  node index.js -q "Rental Mobil Jakarta" -l 10 -m "Penawaran Sistem Rental Mobil Include Landing Page dengan Harga Promo untuk pendaftar pertama 2.000.000/Tahun sudah termasuk server dan custom domain. fitur2 utema ada Manajemen Garasi, Manajemen Mobil, Manajemen Driver, Manajemen Booking, Report Lengkap, dan masih banyak lagi" -c "Jadwalkan Demo Gratis Sekarang"
        `);
        process.exit(0);
        break;
    }
  }

  return options;
}

// Main CLI function
async function main() {
  const options = parseArguments();
  const scraper = new BusinessScraper();

  try {
    console.log(`Starting business scraper...`);
    console.log(`Query: "${options.query}"`);
    console.log(`Max Results: ${options.maxResults}`);
    console.log(`Generate Marketing: ${options.generateMarketing ? 'Yes' : 'No'}`);

    // Scrape with parameters
    await scraper.scrapeGoogleMaps(options.query, options.maxResults);

    // Process dan clean data
    const processedData = await scraper.processResults();

    // Save ke file
    const filename = `${options.query.replace(/\s+/g, '_').toLowerCase()}_leads`;
    const savedFiles = await FileUtils.saveToFile(processedData, filename);

    console.log(
      `\nScraping completed! Found ${processedData.length} potential leads.`
    );
    console.log(`Target: ${options.maxResults}, Actual: ${processedData.length}`);
    console.log("Leads include: all businesses (with and without websites)");

    // Generate marketing templates if requested
    if (options.generateMarketing) {
      console.log('\nü§ñ Generating AI marketing templates...');
      
      if (!options.marketingContent) {
        console.log('‚ùå Error: Marketing content (-m) is required when using marketing feature');
        return;
      }
      
      const MarketingAutomation = require('./marketing');
      const marketing = new MarketingAutomation();
      
      // Load the scraped leads
      console.log(`Loading leads from: ${savedFiles.jsonFile}`);
      const leads = await marketing.loadLeads(savedFiles.jsonFile);
      console.log(`Loaded leads type: ${typeof leads}, length: ${leads ? leads.length : 'undefined'}`);
      
      if (leads && leads.length > 0) {
        console.log(`Processing ${leads.length} leads for marketing...`);
        console.log(`Marketing Content: ${options.marketingContent.substring(0, 100)}...`);
        console.log(`Call to Action: ${options.callToAction || 'Auto-generated by AI'}`);
        
        // Generate marketing templates with custom content
        const marketingData = await marketing.generateMarketingTemplatesWithContent(
          leads, 
          options.marketingContent, 
          options.callToAction
        );
        
        if (marketingData.length > 0) {
          // Save marketing templates
          const marketingFilename = `${options.query.replace(/\s+/g, '_').toLowerCase()}_marketing`;
          await marketing.saveMarketingTemplates(marketingData, marketingFilename);
          
          console.log(`‚úÖ Generated ${marketingData.length} marketing templates`);
        } else {
          console.log('‚ö†Ô∏è No marketing templates generated (check OpenAI configuration)');
        }
      } else {
        console.log('‚ùå No leads found for marketing generation');
        console.log('Leads data:', leads);
      }
    }
  } catch (error) {
    console.error("Error in main process:", error);
  } finally {
    await scraper.close();
  }
}

// Export for testing
module.exports = { main, parseArguments };

// Run if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
} 